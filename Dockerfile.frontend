# Dockerfile for Next.js Frontend
# This builds the React/Next.js frontend application

# Use Node.js 18 alpine image as base (smaller size)
FROM node:18-alpine AS base

# Stage 1: Install dependencies
FROM base AS deps

# Set working directory
WORKDIR /app

# Copy package files
# Copy both package.json and package-lock.json for consistent installs
COPY package.json package-lock.json* ./

# Install dependencies
# --frozen-lockfile ensures exact versions from package-lock.json
RUN npm ci

# Stage 2: Build the application
FROM base AS builder

WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules

# Copy all application files
COPY . .

# Set build-time environment variable
# In Docker, backend is accessible via service name
ENV NEXT_TELEMETRY_DISABLED=1

# Build the Next.js application
# This creates an optimized production build
RUN npm run build

# Stage 3: Production runtime
FROM base AS runner

WORKDIR /app

# Set to production environment
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Create a non-root user for security
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Copy necessary files from builder
# These are the minimal files needed to run Next.js
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static

# Set correct permissions
RUN chown -R nextjs:nodejs /app

# Switch to non-root user
USER nextjs

# Expose port 3000 for the Next.js server
EXPOSE 3000

# Set port environment variable
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Start the Next.js server
# server.js is created by the standalone build
CMD ["node", "server.js"]

