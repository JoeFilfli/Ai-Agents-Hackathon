# Docker Compose Configuration
# This file orchestrates both backend and frontend services

services:
  # Backend service (FastAPI)
  backend:
    # Build from backend Dockerfile
    build:
      context: .
      dockerfile: Dockerfile.backend
    
    # Container name for easy reference
    container_name: ai-agents-backend
    
    # Port mapping: host:container
    # Maps port 8000 on your machine to port 8000 in container
    ports:
      - "8000:8000"
    
    # Load environment variables from .env.local
    # All variables from .env.local are automatically loaded into the container
    env_file:
      - .env.local
    
    # Additional environment variables
    # PYTHONUNBUFFERED ensures Python output is sent directly to logs
    environment:
      - PYTHONUNBUFFERED=1
    
    # Mount volumes for development
    # This allows code changes without rebuilding
    volumes:
      - ./api:/app/api
      - ./api/services:/app/api/services
      - ./api/models:/app/api/models
    
    # Health check configuration
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/api/py/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Restart policy
    # Always restart unless explicitly stopped
    restart: unless-stopped
    
    # Networks
    networks:
      - ai-agents-network

  # Frontend service (Next.js)
  frontend:
    # Build from frontend Dockerfile
    build:
      context: .
      dockerfile: Dockerfile.frontend
    
    # Container name for easy reference
    container_name: ai-agents-frontend
    
    # Port mapping: host:container
    # Maps port 3000 on your machine to port 3000 in container
    ports:
      - "3000:3000"
    
    # Load environment variables from .env.local
    env_file:
      - .env.local
    
    # Environment variables
    environment:
      - NODE_ENV=production
      # Backend URL - uses Docker service name for internal networking
      - BACKEND_URL=http://backend:8000
    
    # Wait for backend to be healthy before starting
    depends_on:
      backend:
        condition: service_healthy
    
    # Restart policy
    restart: unless-stopped
    
    # Networks
    networks:
      - ai-agents-network

# Define custom network
# This allows services to communicate using service names
networks:
  ai-agents-network:
    driver: bridge

